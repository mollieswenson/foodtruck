{"version":3,"sources":["../../src/controller/foodtruck.js"],"names":["config","db","api","post","authenitcate","req","res","newFoodTruck","name","body","foodtype","vegetarian","avgcost","geometry","coordinates","save","err","send","json","message","get","find","foodtrucks","findById","params","id","foodtruck","put","delete","remove","_id","newReview","title","text","recommended","review","reviews","push"],"mappings":"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","file":"foodtruck.js","sourcesContent":["import mongoose from 'mongoose';\nimport { Router } from 'express';\nimport FoodTruck from '../model/foodtruck';\nimport Review from '../model/review';\n\nimport { authenticate } from '../middleware/authMiddleware';\n\nexport default({ config, db }) => {\n  let api = Router();\n\n\n  //note: index gets up to routes (the v1 part),\n  //      routes adds on  /foodtruck\n  //      this file adds the method (/add)\n\n  // '/v1/foodtruck/add'\n  api.post('/add', authenitcate, (req, res) => {\n    let newFoodTruck = new FoodTruck();\n    newFoodTruck.name = req.body.name;\n    newFoodTruck.foodtype = req.body.foodtype;\n    newFoodTruck.vegetarian = req.body.vegetarian;\n    newFoodTruck.avgcost = req.body.avgcost;\n    newFoodTruck.geometry.coordinates = req.body.geometry.coordinates;\n\n    //save is a mongoose method\n    newFoodTruck.save(err => {\n      if (err) {\n        res.send(err);\n      }\n      res.json({ message: 'FoodTruck saved successfully' });\n    });\n  });\n\n// '/v1/foodtruck' -- Read\napi.get('/', (req, res) => {\n  //                   we'll either get back an error, or foodtrucks\n  FoodTruck.find({}, (err, foodtrucks) => {\n    if (err) {\n      res.send(err);\n    }\n    res.json(foodtrucks);\n  });\n});\n\n// '/v1/foodtruck/id' --Read 1\n//      the colon tells express the following is a parameter\napi.get('/:id', (req, res) => {\n  FoodTruck.findById(req.params.id, (err, foodtruck) => {\n    if (err) {\n      res.send(err);\n    }\n    res.json(foodtruck);\n  });\n});\n\n// '/v1/foodtruck/:id' --Update\napi.put('/:id', authenticate, (req, res) => {\n  FoodTruck.findById(req.params.id, (err, foodtruck) => {\n    if (err) {\n      res.send(err);\n    }\n    foodtruck.name = req.body.name;\n    foodtruck.save(err => {\n      if (err) {\n        res.send(err);\n      }\n      res.json( { message: \"FoodTruck updated succesfully\"});\n    });\n  });\n});\n\n\n// '/v1/foodtruck/:id'  -delete\napi.delete('/:id', authenticate, (req, res) => {\n  FoodTruck.remove({\n    _id: req.params.id\n  }, (err, foodtruck) => {\n    if (err) {\n      res.send(err);\n    }\n    res.json({ message: \"FoodTruck removed\"});\n  });\n});\n\n//add review for a specific food truck id\n// '/v1/foodtruck/reviews/add/:id'\napi.post('/reviews/add/:id', authenticate, (req, res) => {\n  FoodTruck.findById(req.params.id, (err, foodtruck) => {\n    if (err) {\n      res.send(err);\n    }\n    let newReview = new Review();\n    newReview.title = req.body.title;\n    newReview.text = req.body.text;\n    newReview.recommended = req.body.recommended;\n    newReview.foodtruck = foodtruck._id;\n    newReview.save((err, review) => {\n      if (err) {\n        res.send(err);\n      }\n      foodtruck.reviews.push(newReview);\n      foodtruck.save(err => {\n        if (err) {\n          res.send(err);\n        }\n        res.json( { message: 'Food truck review saved'})\n      });\n    });\n  });\n});\n\n//get reviews for a specific food truck id\n// '/v1/foodtruck/reviews/:id'\napi.get('/reviews/:id', (req, res) => {\n  Review.find({foodtruck: req.params.id}, (err, reviews) => {\n    if (err) {\n      res.send(err);\n    }\n    res.json(reviews);\n  });\n});\n\n//get foodtrucks that match a specific foodtype\n// '/v1/foodtruck/foodtype/:foodtype'\napi.get('/foodtype/:foodtype', (req, res) => {\n  FoodTruck.find({\n    foodtype: req.params.foodtype}, (err, foodtrucks) => {\n    if (err) {\n      res.send(err);\n    }\n    res.json(foodtrucks);\n  });\n});\n\n//get vegetarian food by foodtype\napi.get('/:vegetarian/:foodtype', (req, res) => {\n  FoodTruck.find({\n    vegetarian: req.params.vegetarian,\n    foodtype: req.params.foodtype\n  }, (err, foodtrucks) => {\n    if (err) {\n      res.send(err);\n    }\n    res.json(foodtrucks);\n  });\n});\n\n\n// add 'recommended' to review schema\n// get all the reviews with recommended true\napi.get('/reviews/recommended/:recommended', (req, res) => {\n  Review.find({recommended: req.params.recommended}, (err, reviews) => {\n    if (err) {\n      res.send(err);\n    }\n    res.json(reviews);\n  });\n});\n\n// only recommended + foodtype trucks\n//do i look at reviews or trucks first?\napi.get('/reviews/recommended/:recommended/:foodtype', (req, res) => {\n  //find all the recommended reviews\n  Review.find({recommended: req.params.recommended}, (err, reviews) => {\n    if (err) {\n      res.send(err);\n    }\n    //from reviews, get only ids of the trucks\n    FoodTruck.find({foodtruck: req.params.id}, (err, foodtrucks) => {\n      if (err) {\n        res.send(err);\n      }\n      res.json(foodtrucks);\n    });\n  });\n});\n\n\n\n//get vegetarian food trucks\n// api.get('/vegetarian/:vegetarian', (req, res) => {\n//   FoodTruck.find({vegetarian: req.params.vegetarian}, (err, foodtrucks) => {\n//     if (err) {\n//       res.send(err);\n//     }\n//     res.json(foodtrucks);\n//   });\n// });\n\n\n\n\n\n//get only food trucks that have reviews\n\n\n\n\nreturn api;\n}\n"]}